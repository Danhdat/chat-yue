package services

import (
	"chatbtc/models"
	"chatbtc/utils"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/shopspring/decimal"
)

type AutoVolumeService struct {
	volumeRepo         *models.AutoVolumeRecordRepository
	symbolRepo         *models.SymbolRepository
	telegramBotService *TelegramBotService
}

// Truy·ªÅn TelegramBotService v√†o khi kh·ªüi t·∫°o
func NewAutoVolumeService(telegramBotService *TelegramBotService) *AutoVolumeService {
	return &AutoVolumeService{
		volumeRepo:         models.NewAutoVolumeRecordRepository(),
		symbolRepo:         models.NewSymbolRepository(),
		telegramBotService: telegramBotService,
	}
}

func (s *AutoVolumeService) FetchAndSaveAllSymbolsVolume() error {
	symbols, err := s.symbolRepo.GetAllSymbols()
	if err != nil {
		return err
	}
	for _, symbol := range symbols {
		// L·∫•y d·ªØ li·ªáu kline
		url := fmt.Sprintf("https://api.binance.com/api/v3/klines?symbol=%s&interval=1h&limit=23", symbol)
		resp, err := http.Get(url)
		if err != nil {
			fmt.Printf("L·ªói l·∫•y d·ªØ li·ªáu %s: %v\n", symbol, err)
			continue
		}
		body, _ := io.ReadAll(resp.Body)
		resp.Body.Close()

		var klines [][]interface{}
		if err := json.Unmarshal(body, &klines); err != nil || len(klines) == 0 {
			fmt.Printf("L·ªói parse d·ªØ li·ªáu %s: %v\n", symbol, err)
			continue
		}
		// Lo·∫°i b·ªè c√¢y n·∫øn cu·ªëi c√πng (ch∆∞a ƒë√≥ng) n·∫øu c√≥ nhi·ªÅu h∆°n 1 n·∫øn
		if len(klines) > 1 {
			klines = klines[:len(klines)-1]
		}
		// L·∫•y 22 n·∫øn ƒë√£ ƒë√≥ng g·∫ßn nh·∫•t
		recentKlines := klines
		if len(klines) > 22 {
			recentKlines = klines[len(klines)-22:]
		}

		loc := time.FixedZone("UTC+7", 7*60*60)

		// T·∫°o slice ƒë·ªÉ l∆∞u t·∫•t c·∫£ records cho symbol n√†y
		var records []models.AutoVolumeRecord

		for _, k := range recentKlines {
			openTime := k[0].(float64)
			quoteAssetVolumeStr := k[7].(string)
			quoteAssetVolume, _ := strconv.ParseFloat(quoteAssetVolumeStr, 64)
			openPriceStr := k[1].(string)
			openPrice, _ := strconv.ParseFloat(openPriceStr, 64)
			closePriceStr := k[4].(string)
			closePrice, _ := strconv.ParseFloat(closePriceStr, 64)
			highPriceStr := k[2].(string)
			highPrice, _ := strconv.ParseFloat(highPriceStr, 64)
			lowPriceStr := k[3].(string)
			lowPrice, _ := strconv.ParseFloat(lowPriceStr, 64)

			record := models.AutoVolumeRecord{
				Symbol:           symbol,
				OpenTime:         openTime,
				QuoteAssetVolume: quoteAssetVolume,
				OpenPrice:        openPrice,
				ClosePrice:       closePrice,
				HighPrice:        highPrice,
				LowPrice:         lowPrice,
				CreatedAt:        time.Now().In(loc),
				UpdatedAt:        time.Now().In(loc),
			}
			records = append(records, record)
		}

		// Thay th·∫ø t·∫•t c·∫£ d·ªØ li·ªáu c≈© b·∫±ng d·ªØ li·ªáu m·ªõi
		if err := s.volumeRepo.ReplaceAllForSymbol(symbol, records); err != nil {
			fmt.Printf("L·ªói l∆∞u DB %s: %v\n", symbol, err)
		} else {
			fmt.Printf("ƒê√£ c·∫≠p nh·∫≠t %d records volume cho %s\n", len(records), symbol)
		}
		time.Sleep(100 * time.Millisecond)
	}
	return nil
}

func (s *AutoVolumeService) AnalyzeAndNotifyVolumes(channelID string) error {
	// L·∫•y t·∫•t c·∫£ symbols thay v√¨ t·∫•t c·∫£ records
	symbols, err := s.symbolRepo.GetAllSymbols()
	if err != nil {
		return err
	}
	log.Println("Analyzing volumes for ", len(symbols), "symbols")
	taService := NewTechnicalAnalysisService()

	// Map ƒë·ªÉ theo d√µi symbols ƒë√£ x·ª≠ l√Ω ƒë·ªÉ tr√°nh tr√πng l·∫∑p
	processedSymbols := make(map[string]bool)
	loc := time.FixedZone("UTC+7", 7*60*60)

	for _, symbol := range symbols {
		// Ki·ªÉm tra n·∫øu symbol ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
		if processedSymbols[symbol] {
			continue
		}
		records22, _ := s.volumeRepo.GetLastNBySymbol(symbol, 23)
		// Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
		if len(records22) == 0 {
			continue
		}

		var volumes []float64
		for _, r := range records22 {
			volumes = append(volumes, r.QuoteAssetVolume)
		}
		//ch·ªâ t·ªõi c√¢y n·∫øn 21
		var totalCandlestickLength float64 = 0
		var totalCandlestickBody float64 = 0
		for _, r := range records22[1:] {
			totalCandlestickLength += r.CandlestickLength()
			totalCandlestickBody += r.CandlestickBody()
		}
		averageCandlestickBody := totalCandlestickBody / float64(len(records22)-1)

		volumeAnalysis := taService.analyzeVolumeFromFloat64(volumes)
		if volumeAnalysis.VolumeStrength == "EXTREME" || volumeAnalysis.VolumeStrength == "STRONG" {
			// L·∫•y b·∫£n ghi M·ªöI NH·∫§T (records22[0])
			latestRecord := records22[0]
			// l·∫•y b·∫£n ghi c√¢y n·∫øn th·ª© 21
			record21 := records22[1]
			// l·∫•y b·∫£n ghi c√¢y n·∫øn th·ª© 20
			record20 := records22[2]

			// L·∫•y time hi·ªán t·∫°i
			currentTime := time.Now().In(loc)
			formattedTime := currentTime.Format("2006-01-02 15:04:05")

			// Ph√¢n t√≠ch m√¥ h√¨nh
			engulfingResult := detectEngulfing(record20, record21)
			confirmation1 := engulfingResult.Confirmation
			pattern1 := engulfingResult.Pattern
			piercingResult := detectPiercingPattern(record20, record21, averageCandlestickBody)
			confirmation2 := piercingResult.Confirmation
			pattern2 := piercingResult.Pattern

			message := fmt.Sprintf("üí∞*[ALERT]* Symbol: %s\n"+
				"üìÖ Time: %s\n"+
				"üöÄVolume: %s\n"+
				"üöÄSMA21: %s\n"+
				"üöÄPrice: %s\n"+
				"üéØStrength: %s\n"+
				"üî•Signal: %s\n"+
				"üî•Pattern: %s %s\n"+
				"üî•Confirmation: %s\n %s\n"+
				"Check record21 %d , record20 %d",
				strings.TrimSuffix(latestRecord.Symbol, "USDT"),
				formattedTime,
				utils.FormatVolume(decimal.NewFromFloat(latestRecord.QuoteAssetVolume)),
				utils.FormatVolume(volumeAnalysis.VolumeSMA21),
				utils.FormatPrice(decimal.NewFromFloat(latestRecord.ClosePrice)),
				volumeAnalysis.VolumeStrength,
				volumeAnalysis.VolumeSignal,
				pattern1, pattern2,
				confirmation1, confirmation2,
				record21.ID, record20.ID,
			)
			s.telegramBotService.SendTelegramToChannel(channelID, message)
		}

		// ƒê√°nh d·∫•u symbol ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
		processedSymbols[symbol] = true
		time.Sleep(1 * time.Second)
	}
	time.Sleep(1 * time.Second)

	return nil
}

// H√†m ph√¢n t√≠ch volume cho 1 gi√° tr·ªã float64 (t∆∞∆°ng th√≠ch v·ªõi analyzeVolume)
func (s *TechnicalAnalysisService) analyzeVolumeFromFloat64(volumes []float64) models.VolumeAnalysis {
	// ƒê·∫¢O NG∆Ø·ª¢C SLICE ·ªû ƒê√ÇY n·∫øu c·∫ßn
	for i, j := 0, len(volumes)-1; i < j; i, j = i+1, j-1 {
		volumes[i], volumes[j] = volumes[j], volumes[i]
	}
	if len(volumes) < models.VOLUME_SMA_PERIOD+1 {
		return models.VolumeAnalysis{}
	}
	// Chuy·ªÉn sang decimal.Decimal ƒë·ªÉ d√πng l·∫°i logic c≈© n·∫øu c·∫ßn
	currentVolume := decimal.NewFromFloat(volumes[len(volumes)-1])
	var sum float64
	for i := len(volumes) - models.VOLUME_SMA_PERIOD; i < len(volumes); i++ {
		sum += volumes[i]
	}
	volumeSMA := sum / float64(models.VOLUME_SMA_PERIOD)
	log.Println("volumes:", volumes)
	log.Println("SUM:", sum)
	log.Println("volumeSMA:", volumeSMA)
	var volumeSignal, volumeStrength, confirmation string
	confirmation = "null"
	var volumeRatio decimal.Decimal
	if volumeSMA > 0 {
		volumeRatio = currentVolume.Div(decimal.NewFromFloat(volumeSMA))
	} else {
		volumeRatio = decimal.Zero
	}
	if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(models.VOLUME_SPIKE_3X)) {
		volumeSignal = "üî• VOLUME EXPLOSION"
		volumeStrength = "EXTREME"
	} else if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(models.VOLUME_SPIKE_2X)) {
		volumeSignal = "üöÄ HIGH VOLUME SPIKE"
		volumeStrength = "STRONG"
	} else if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(models.VOLUME_SPIKE_1_5X)) {
		volumeSignal = "üìà ABOVE AVERAGE VOLUME"
		volumeStrength = "MODERATE"
		confirmation = "T√≠n hi·ªáu TRUNG B√åNH - C√≥ s·ª± quan t√¢m tƒÉng l√™n"
	} else if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(1.0)) {
		volumeSignal = "üü° NORMAL VOLUME"
		volumeStrength = "NORMAL"
	} else {
		volumeSignal = "üìâ LOW VOLUME"
		volumeStrength = "WEAK"
	}
	return models.VolumeAnalysis{
		CurrentVolume:  currentVolume,
		VolumeSMA21:    decimal.NewFromFloat(volumeSMA),
		VolumeRatio:    volumeRatio,
		VolumeSignal:   volumeSignal,
		VolumeStrength: volumeStrength,
		Confirmation:   confirmation,
	}
}

type PatternDetectionResult struct {
	Pattern      string
	Confirmation string
	IsDetected   bool
}

func detectEngulfing(record20, record21 models.AutoVolumeRecord) PatternDetectionResult {
	if record20.Candlestick() == 0 &&
		record21.Candlestick() == 1 &&
		record21.QuoteAssetVolume > record20.QuoteAssetVolume*1.2 &&
		record21.OpenPrice < record20.ClosePrice &&
		record21.ClosePrice > record20.OpenPrice {
		return PatternDetectionResult{
			Pattern:      "‚öôÔ∏è M√¥ h√¨nh Bullish Engulfing",
			Confirmation: "‚úÖ ƒê√¢y l√† m·ªôt t√≠n hi·ªáu ƒë·∫£o chi·ªÅu tƒÉng gi√° r·∫•t m·∫°nh m·∫Ω, ƒë·∫∑c bi·ªát n·∫øu n√≥ xu·∫•t hi·ªán sau m·ªôt xu h∆∞·ªõng gi·∫£m. N√≥ cho th·∫•y phe mua ƒë√£ ho√†n to√†n √°p ƒë·∫£o phe b√°n",
			IsDetected:   true,
		}
	} else if record20.Candlestick() == 1 &&
		record21.Candlestick() == 0 &&
		record21.QuoteAssetVolume > record20.QuoteAssetVolume*1.2 &&
		record21.OpenPrice > record20.ClosePrice &&
		record21.ClosePrice < record20.OpenPrice {
		return PatternDetectionResult{
			Pattern:      "‚öôÔ∏è M√¥ h√¨nh Bearish Engulfing",
			Confirmation: "‚ùé ƒê√¢y l√† m·ªôt t√≠n hi·ªáu ƒë·∫£o chi·ªÅu gi·∫£m gi√° m·∫°nh m·∫Ω, ƒë·∫∑c bi·ªát n·∫øu n√≥ xu·∫•t hi·ªán sau m·ªôt xu h∆∞·ªõng tƒÉng. N√≥ cho th·∫•y phe b√°n ƒë√£ ho√†n to√†n √°p ƒë·∫£o phe mua",
			IsDetected:   true,
		}
	}
	return PatternDetectionResult{IsDetected: false}
}

func detectPiercingPattern(record20, record21 models.AutoVolumeRecord, averageCandlestickBody float64) PatternDetectionResult {
	if record20.Candlestick() == 0 &&
		record20.IsCandlestickBodyLong(averageCandlestickBody, 1.5) &&
		record21.Candlestick() == 1 &&
		record21.OpenPrice < record20.ClosePrice && // N·∫øn 2 m·ªü c·ª≠a d∆∞·ªõi gi√° ƒë√≥ng c·ª≠a n·∫øn 1 (c√≥ th·ªÉ m·ªü d∆∞·ªõi c·∫£ low)
		record21.ClosePrice > record20.CandlestBodyMidpoint() && // N·∫øn 2 ƒë√≥ng c·ª≠a tr√™n ƒëi·ªÉm gi·ªØa th√¢n n·∫øn 1
		record21.ClosePrice < record20.OpenPrice { // N·∫øn 2 ƒë√≥ng c·ª≠a d∆∞·ªõi gi√° m·ªü c·ª≠a n·∫øn 1 (kh√¥ng ph·∫£i nh·∫•n ch√¨m) {
		return PatternDetectionResult{
			Pattern:      "‚öôÔ∏è M√¥ h√¨nh Piercing Pattern",
			Confirmation: "‚úÖ T√≠n hi·ªáu ƒë·∫£o chi·ªÅu tƒÉng gi√°. Phe mua ƒë√£ gi√†nh l·∫°i quy·ªÅn ki·ªÉm so√°t sau m·ªôt ƒë·ª£t gi·∫£m gi√° m·∫°nh",
			IsDetected:   true,
		}
	}
	return PatternDetectionResult{IsDetected: false}
}

type Scheduler2 struct {
	autoVolumeService *AutoVolumeService
	stopChan          chan bool
}

// Truy·ªÅn channelID v√†o khi kh·ªüi t·∫°o Scheduler2
func NewScheduler2(autoVolumeService *AutoVolumeService) *Scheduler2 {
	return &Scheduler2{
		autoVolumeService: autoVolumeService,
		stopChan:          make(chan bool),
	}
}

func (s *Scheduler2) Start() {
	log.Println("Scheduler Volume started")
	// H√†m helper ƒë·ªÉ t√≠nh th·ªùi gian ƒë·∫øn gi·ªù ti·∫øp theo
	nextHour := func() time.Time {
		now := time.Now()
		next := now.Truncate(time.Hour).Add(time.Hour)
		return next
	}
	// T·∫°o timer v·ªõi th·ªùi gian ƒë·∫øn gi·ªù ti·∫øp theo
	timer := time.NewTimer(time.Until(nextHour()))
	defer timer.Stop()
	for {
		select {
		case <-timer.C:
			go s.Run()
			// ƒê·∫∑t l·∫°i timer cho gi·ªù ti·∫øp theo
			timer.Reset(time.Until(nextHour()))
		case <-s.stopChan:
			log.Println("Scheduler stopped")
			return
		}
	}
}

func (s *Scheduler2) Stop() {
	s.stopChan <- true
}

func (s *Scheduler2) Run() {
	log.Println("Running update")
	if err := s.autoVolumeService.FetchAndSaveAllSymbolsVolume(); err != nil {
		log.Printf("L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: %v", err)
	}
	log.Println("Update completed")

}

type Scheduler3 struct {
	autoVolumeService *AutoVolumeService
	channelID         string
	stopChan          chan bool
}

func NewScheduler3(autoVolumeService *AutoVolumeService, channelID string) *Scheduler3 {
	return &Scheduler3{
		autoVolumeService: autoVolumeService,
		channelID:         channelID,
		stopChan:          make(chan bool),
	}
}

func (s *Scheduler3) Start() {
	// H√†m helper ƒë·ªÉ t√≠nh th·ªùi gian ƒë·∫øn gi·ªù:02 ph√∫t ti·∫øp theo
	nextSchedule := func() time.Time {
		now := time.Now()
		// C·∫Øt l·∫ª ƒë·∫øn gi·ªù, sau ƒë√≥ th√™m 1 gi·ªù + 2 ph√∫t (v√≠ d·ª•: 8:30 ‚Üí 9:02:00)
		next := now.Truncate(time.Hour).Add(time.Hour + 2*time.Minute)
		return next
	}
	// T·∫°o timer v·ªõi th·ªùi gian ƒë·∫øn l·∫ßn ch·∫°y ti·∫øp theo (9:02:00 n·∫øu now l√† 8:30:00)
	timer := time.NewTimer(time.Until(nextSchedule()))
	defer timer.Stop()
	for {
		select {
		case <-timer.C:
			go s.Run()
			timer.Reset(time.Until(nextSchedule()))
		case <-s.stopChan:
			log.Println("Scheduler stopped")
			return
		}
	}
}

func (s *Scheduler3) Run() {
	if err := s.autoVolumeService.AnalyzeAndNotifyVolumes(s.channelID); err != nil {
		log.Printf("L·ªói khi ph√¢n t√≠ch v√† g·ª≠i c·∫£nh b√°o: %v", err)
	}
	log.Println("Analyze and notify completed")
}
func (s *Scheduler3) Stop() {
	s.stopChan <- true
}
