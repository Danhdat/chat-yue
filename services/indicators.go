package services

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"chatbtc/models"
	"chatbtc/utils"

	"github.com/shopspring/decimal"
)

// TechnicalAnalysisService cung c·∫•p c√°c ph∆∞∆°ng th·ª©c t√≠nh to√°n ch·ªâ b√°o k·ªπ thu·∫≠t
type TechnicalAnalysisService struct{}

// NewTechnicalAnalysisService t·∫°o instance m·ªõi c·ªßa service
func NewTechnicalAnalysisService() *TechnicalAnalysisService {
	return &TechnicalAnalysisService{}
}

// CalculateRSI t√≠nh to√°n ch·ªâ b√°o RSI (Relative Strength Index)
func (s *TechnicalAnalysisService) CalculateRSI(prices []float64, period int) float64 {
	if len(prices) < period+1 {
		return 0
	}

	gains := make([]float64, len(prices)-1)
	losses := make([]float64, len(prices)-1)

	// T√≠nh gain v√† loss
	for i := 1; i < len(prices); i++ {
		change := prices[i] - prices[i-1]
		if change > 0 {
			gains[i-1] = change
			losses[i-1] = 0
		} else {
			gains[i-1] = 0
			losses[i-1] = -change
		}
	}

	// T√≠nh trung b√¨nh gain v√† loss
	avgGain := s.calculateSMA(gains[len(gains)-period:], period)
	avgLoss := s.calculateSMA(losses[len(losses)-period:], period)

	if avgLoss == 0 {
		return 100
	}

	rs := avgGain / avgLoss
	rsi := 100 - (100 / (1 + rs))

	return rsi
}

// CalculateEMA t√≠nh to√°n Exponential Moving Average
func (s *TechnicalAnalysisService) CalculateEMA(prices []float64, period int) float64 {
	if len(prices) < period {
		return 0
	}

	// Multiplier
	multiplier := 2.0 / float64(period+1)

	// T√≠nh SMA ƒë·∫ßu ti√™n l√†m EMA ban ƒë·∫ßu
	ema := s.calculateSMA(prices[:period], period)

	// T√≠nh EMA cho c√°c gi√° tr·ªã c√≤n l·∫°i
	for i := period; i < len(prices); i++ {
		ema = (prices[i] * multiplier) + (ema * (1 - multiplier))
	}

	return ema
}

// calculateSMA t√≠nh Simple Moving Average
func (s *TechnicalAnalysisService) calculateSMA(prices []float64, period int) float64 {
	if len(prices) < period {
		return 0
	}

	sum := 0.0
	for _, price := range prices {
		sum += price
	}

	return sum / float64(len(prices))
}

// CalculateMACD t√≠nh to√°n MACD (Moving Average Convergence Divergence)
func (s *TechnicalAnalysisService) CalculateMACD(prices []float64) (float64, float64, float64) {
	if len(prices) < 26 {
		return 0, 0, 0
	}

	ema12 := s.CalculateEMA(prices, 12)
	ema26 := s.CalculateEMA(prices, 26)

	macd := ema12 - ema26

	// T√≠nh signal line (EMA c·ªßa MACD)
	var macdValues []float64
	for i := 26; i < len(prices); i++ {
		ema12 := s.CalculateEMA(prices[:i+1], 12)
		ema26 := s.CalculateEMA(prices[:i+1], 26)
		macdValues = append(macdValues, ema12-ema26)
	}

	signal := s.CalculateEMA(macdValues, 9)
	histogram := macd - signal

	return macd, signal, histogram
}

// analyzeVolume ph√¢n t√≠ch volume d·ª±a tr√™n ratio so v·ªõi SMA
func (s *TechnicalAnalysisService) analyzeVolume(klines []models.KlineData) models.VolumeAnalysis {
	var volumes []float64
	for _, k := range klines {
		v, err := strconv.ParseFloat(k.Volume, 64)
		if err != nil {
			continue
		}
		volumes = append(volumes, v)
	}
	if len(volumes) < models.VOLUME_SMA_PERIOD+1 {
		return models.VolumeAnalysis{}
	}
	currentVolume := decimal.NewFromFloat(volumes[len(volumes)-1])
	var sum float64
	for i := len(volumes) - models.VOLUME_SMA_PERIOD - 1; i < len(volumes)-1; i++ {
		sum += volumes[i]
	}
	volumeSMA := sum / float64(models.VOLUME_SMA_PERIOD)
	volumeSMA21 := decimal.NewFromFloat(volumeSMA)
	var volumeSignal, volumeStrength, confirmation string
	var volumeRatio decimal.Decimal
	if volumeSMA > 0 {
		volumeRatio = currentVolume.Div(decimal.NewFromFloat(volumeSMA))
	} else {
		volumeRatio = decimal.Zero
	}
	if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(models.VOLUME_SPIKE_3X)) {
		volumeSignal = "üî• VOLUME EXPLOSION"
		volumeStrength = "EXTREME"
		confirmation = "T√≠n hi·ªáu C·ª±c M·∫†NH - Breakout/Breakdown ƒë∆∞·ª£c x√°c nh·∫≠n"
	} else if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(models.VOLUME_SPIKE_2X)) {
		volumeSignal = "üöÄ HIGH VOLUME SPIKE"
		volumeStrength = "STRONG"
		confirmation = "T√≠n hi·ªáu M·∫†NH - Xu h∆∞·ªõng ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët"
	} else if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(models.VOLUME_SPIKE_1_5X)) {
		volumeSignal = "üìà ABOVE AVERAGE VOLUME"
		volumeStrength = "MODERATE"
		confirmation = "T√≠n hi·ªáu TRUNG B√åNH - C√≥ s·ª± quan t√¢m tƒÉng l√™n"
	} else if volumeRatio.GreaterThanOrEqual(decimal.NewFromFloat(1.0)) {
		volumeSignal = "üü° NORMAL VOLUME"
		volumeStrength = "NORMAL"
		confirmation = "Volume b√¨nh th∆∞·ªùng - Theo d√µi th√™m"
	} else {
		volumeSignal = "üìâ LOW VOLUME"
		volumeStrength = "WEAK"
		confirmation = "Volume th·∫•p - T√≠n hi·ªáu y·∫øu, c·∫©n th·∫≠n v·ªõi fake move"
	}
	return models.VolumeAnalysis{
		CurrentVolume:  currentVolume,
		VolumeSMA21:    volumeSMA21,
		VolumeRatio:    volumeRatio,
		VolumeSignal:   volumeSignal,
		VolumeStrength: volumeStrength,
		Confirmation:   confirmation,
	}
}

// AnalyzeCrypto ph√¢n t√≠ch crypto v·ªõi d·ªØ li·ªáu kline
func (s *TechnicalAnalysisService) AnalyzeCrypto(symbol string, klines []models.KlineData, interval string) (string, error) {
	if len(klines) == 0 {
		return "", fmt.Errorf("kh√¥ng c√≥ d·ªØ li·ªáu cho %s", symbol)
	}

	// Chuy·ªÉn ƒë·ªïi gi√° ƒë√≥ng c·ª≠a sang float64
	var closePrices []float64
	for _, kline := range klines {
		price, err := strconv.ParseFloat(kline.Close, 64)
		if err != nil {
			continue
		}
		closePrices = append(closePrices, price)
	}

	if len(closePrices) < models.RSI_PERIOD+1 {
		return "", fmt.Errorf("kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh to√°n cho %s", symbol)
	}

	// T√≠nh c√°c ch·ªâ b√°o
	currentPrice := closePrices[len(closePrices)-1]
	rsi := s.CalculateRSI(closePrices, models.RSI_PERIOD)
	ema9 := s.CalculateEMA(closePrices, models.EMA_SHORT)
	ema21 := s.CalculateEMA(closePrices, models.EMA_MEDIUM)
	ema50 := s.CalculateEMA(closePrices, models.EMA_LONG)

	// Ph√¢n t√≠ch volume
	volumeAnalysis := s.analyzeVolume(klines)

	analysis := models.TrendAnalysis{
		Signals: make([]string, 0),
	}

	// Ph√¢n t√≠ch RSI
	if rsi > 70 {
		analysis.Direction = "bearish"
	} else if rsi < 30 {
		analysis.Direction = "bullish"
	} else {
		analysis.Direction = "sideways"
	}

	// H·ªá th·ªëng 3 EMA
	if currentPrice > ema9 && ema9 > ema21 && ema21 > ema50 {
		analysis.Direction = "bullish"
		// ƒêi·ªÅu ch·ªânh strength d·ª±a tr√™n volume
		if volumeAnalysis.VolumeStrength == "EXTREME" || volumeAnalysis.VolumeStrength == "STRONG" {
			analysis.Strength = "strong"
			analysis.Signals = append(analysis.Signals, "üöÄ **STRONG BULLISH**: Gi√° > EMA9 > EMA21 > EMA50")
			analysis.Signals = append(analysis.Signals, "‚úÖ T·∫•t c·∫£ EMA ƒë·ªÅu h∆∞·ªõng l√™n v√† x·∫øp ch·ªìng ƒë√∫ng th·ª© t·ª±")
			analysis.Signals = append(analysis.Signals, "üî• Volume cao x√°c nh·∫≠n xu h∆∞·ªõng m·∫°nh")
			analysis.Recommendation = "üü¢ **MUA/GI·ªÆ** - Xu h∆∞·ªõng tƒÉng m·∫°nh ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi volume"
		} else {
			analysis.Strength = "moderate"
			analysis.Signals = append(analysis.Signals, "üìà **MODERATE BULLISH**: Gi√° > EMA9 > EMA21 > EMA50")
			analysis.Signals = append(analysis.Signals, "‚úÖ T·∫•t c·∫£ EMA ƒë·ªÅu h∆∞·ªõng l√™n v√† x·∫øp ch·ªìng ƒë√∫ng th·ª© t·ª±")
			analysis.Signals = append(analysis.Signals, "‚ö†Ô∏è Volume th·∫•p - C·∫ßn theo d√µi th√™m")
			analysis.Recommendation = "üü° **C·∫®N TH·∫¨N MUA** - Xu h∆∞·ªõng tƒÉng nh∆∞ng volume ch∆∞a x√°c nh·∫≠n"
		}

	} else if currentPrice < ema9 && ema9 < ema21 && ema21 < ema50 {
		analysis.Direction = "bearish"
		// ƒêi·ªÅu ch·ªânh strength d·ª±a tr√™n volume
		if volumeAnalysis.VolumeStrength == "EXTREME" || volumeAnalysis.VolumeStrength == "STRONG" {
			analysis.Strength = "strong"
			analysis.Signals = append(analysis.Signals, "‚ö†Ô∏è **STRONG BEARISH**: Gi√° < EMA9 < EMA21 < EMA50")
			analysis.Signals = append(analysis.Signals, "‚ùå T·∫•t c·∫£ EMA ƒë·ªÅu h∆∞·ªõng xu·ªëng v√† x·∫øp ch·ªìng ƒë√∫ng th·ª© t·ª±")
			analysis.Signals = append(analysis.Signals, "üî• Volume cao x√°c nh·∫≠n xu h∆∞·ªõng gi·∫£m m·∫°nh")
			analysis.Recommendation = "üî¥ **B√ÅN/ƒê·ª®NG NGO√ÄI** - Xu h∆∞·ªõng gi·∫£m m·∫°nh ƒë∆∞·ª£c x√°c nh·∫≠n b·ªüi volume"
		} else {
			analysis.Strength = "moderate"
			analysis.Signals = append(analysis.Signals, "üìâ **MODERATE BEARISH**: Gi√° < EMA9 < EMA21 < EMA50")
			analysis.Signals = append(analysis.Signals, "‚ùå T·∫•t c·∫£ EMA ƒë·ªÅu h∆∞·ªõng xu·ªëng v√† x·∫øp ch·ªìng ƒë√∫ng th·ª© t·ª±")
			analysis.Signals = append(analysis.Signals, "‚ö†Ô∏è Volume th·∫•p - C·∫ßn theo d√µi th√™m")
			analysis.Recommendation = "üü° **C·∫®N TH·∫¨N B√ÅN** - Xu h∆∞·ªõng gi·∫£m nh∆∞ng volume ch∆∞a x√°c nh·∫≠n"
		}
	} else if currentPrice > ema9 && currentPrice > ema21 && ema21 > ema50 {
		analysis.Direction = "bullish"
		analysis.Strength = "moderate"
		analysis.Signals = append(analysis.Signals, "üìà **MODERATE BULLISH**: Gi√° tr√™n EMA9 v√† EMA21")

		if ema9 > ema21 {
			analysis.Signals = append(analysis.Signals, "‚úÖ EMA9 > EMA21 - ƒê·ªông l∆∞·ª£ng tƒÉng t·ªët")
		} else {
			analysis.Signals = append(analysis.Signals, "‚ö†Ô∏è EMA9 < EMA21 - ƒê·ªông l∆∞·ª£ng ch∆∞a m·∫°nh")
		}
		// Volume affects recommendation
		if volumeAnalysis.VolumeStrength == "STRONG" || volumeAnalysis.VolumeStrength == "EXTREME" {
			analysis.Recommendation = "üü¢ **MUA** - Volume support xu h∆∞·ªõng tƒÉng"
		} else {
			analysis.Recommendation = "üü° **C·∫®N TH·∫¨N MUA** - Thi·∫øu volume ch∆∞a x√°c nh·∫≠n"
		}
	} else if currentPrice < ema9 && currentPrice < ema21 && ema21 < ema50 {
		analysis.Direction = "bearish"
		analysis.Strength = "moderate"
		analysis.Signals = append(analysis.Signals, "üìâ **MODERATE BEARISH**: Gi√° d∆∞·ªõi EMA9 v√† EMA21")

		if ema9 < ema21 {
			analysis.Signals = append(analysis.Signals, "‚ùå EMA9 < EMA21 - √Åp l·ª±c b√°n m·∫°nh")
		} else {
			analysis.Signals = append(analysis.Signals, "‚ö†Ô∏è EMA9 > EMA21 - √Åp l·ª±c b√°n ƒëang gi·∫£m")
		}
		// Volume affects recommendation
		if volumeAnalysis.VolumeStrength == "STRONG" || volumeAnalysis.VolumeStrength == "EXTREME" {
			analysis.Recommendation = "üî¥ **B√ÅN** - Volume support xu h∆∞·ªõng gi·∫£m"
		} else {
			analysis.Recommendation = "üü° **C·∫®N TH·∫¨N B√ÅN** - Thi·∫øu volume ch∆∞a x√°c nh·∫≠n"
		}
	} else {
		analysis.Direction = "sideways"
		analysis.Strength = "weak"
		analysis.Signals = append(analysis.Signals, "‚ÜîÔ∏è **SIDEWAYS**: EMA b·ªã xo·∫Øn, gi√° dao ƒë·ªông")

		// Check for potential breakout signals
		if currentPrice > ema50 {
			analysis.Signals = append(analysis.Signals, "üü¢ Gi√° v·∫´n tr√™n EMA50 - Xu h∆∞·ªõng tƒÉng d√†i h·∫°n")
		} else if currentPrice < ema50 {
			analysis.Signals = append(analysis.Signals, "üî¥ Gi√° d∆∞·ªõi EMA50 - Xu h∆∞·ªõng gi·∫£m d√†i h·∫°n")
		}
		// Volume can signal upcoming breakout
		if volumeAnalysis.VolumeStrength == "STRONG" || volumeAnalysis.VolumeStrength == "EXTREME" {
			analysis.Recommendation = "‚ö° **CH·ªú BREAKOUT** - Volume cao c√≥ th·ªÉ b√°o hi·ªáu breakout s·∫Øp t·ªõi"
			analysis.Signals = append(analysis.Signals, "üî• Volume tƒÉng trong t√≠ch lu·ªπ - Chu·∫©n b·ªã breakout")
		} else {
			analysis.Recommendation = "‚è≥ **CH·ªú T√çN HI·ªÜU** - Th·ªã tr∆∞·ªùng ƒëang t√≠ch lu·ªπ"
		}
	}

	// Golden Cross: EMA9 crosses above EMA21 (in uptrend confirmed by EMA50)
	if ema9 > ema21 && ema21 > ema50 {
		analysis.Signals = append(analysis.Signals, "‚≠ê **GOLDEN CROSS**: EMA9 c·∫Øt l√™n EMA21 trong xu h∆∞·ªõng tƒÉng")

		// Death Cross: EMA9 crosses below EMA21 (in downtrend confirmed by EMA50)
	} else if ema9 < ema21 && ema21 < ema50 {
		analysis.Signals = append(analysis.Signals, "üíÄ **DEATH CROSS**: EMA9 c·∫Øt xu·ªëng EMA21 trong xu h∆∞·ªõng gi·∫£m")
	}

	// EMA21/EMA50 major crossovers
	if ema21 > ema50 {
		analysis.Signals = append(analysis.Signals, "üîÑ EMA21 > EMA50 - Xu h∆∞·ªõng trung h·∫°n t√≠ch c·ª±c")
	} else {
		analysis.Signals = append(analysis.Signals, "üîÑ EMA21 < EMA50 - Xu h∆∞·ªõng trung h·∫°n ti√™u c·ª±c")
	}

	// N·∫øu ch∆∞a c√≥ khuy·∫øn ngh·ªã r√µ r√†ng
	if analysis.Recommendation == "" {
		if analysis.Direction == "bullish" {
			analysis.Recommendation = "üü¢ **C√ì TH·ªÇ MUA/GI·ªÆ** - ∆Øu ti√™n theo d√µi th√™m t√≠n hi·ªáu x√°c nh·∫≠n"
		} else if analysis.Direction == "bearish" {
			analysis.Recommendation = "üî¥ **C√ÇN NH·∫ÆC B√ÅN/ƒê·ª®NG NGO√ÄI** - ∆Øu ti√™n ch·ªù t√≠n hi·ªáu ƒë·∫£o chi·ªÅu"
		} else {
			analysis.Recommendation = "üü° **TRUNG L·∫¨P** - Ch·ªù t√≠n hi·ªáu r√µ r√†ng h∆°n"
		}
	}

	// T·∫°o th√¥ng b√°o
	message := fmt.Sprintf("üìä **Ph√¢n t√≠ch k·ªπ thu·∫≠t %s (%s)**\n\n", strings.ToUpper(symbol), strings.ToUpper(interval))
	message += fmt.Sprintf("üí∞ **Gi√° hi·ªán t·∫°i:** $%s\n\n", utils.FormatPriceN(currentPrice, 4))

	// Block H·ªÜ TH·ªêNG 3 EMA
	message += fmt.Sprintf("üìà **EMA 9:** $%s\n", utils.FormatPriceN(ema9, 4))
	message += fmt.Sprintf("üìä **EMA 21:** $%s\n", utils.FormatPriceN(ema21, 4))
	message += fmt.Sprintf("üìâ **EMA 50:** $%s\n", utils.FormatPriceN(ema50, 4))
	message += fmt.Sprintf("üéØ **Xu h∆∞·ªõng:** %s (%s)\n\n", strings.ToUpper(analysis.Direction), strings.ToUpper(analysis.Strength))

	// Block t√≠n hi·ªáu 3 EMA
	message += "**‚ú® T√≠n hi·ªáu:**\n"
	for _, signal := range analysis.Signals {
		message += fmt.Sprintf("- %s\n", signal)
	}

	// Block RSI
	message += fmt.Sprintf("\n**üìà RSI(%d):** %.2f\n", models.RSI_PERIOD, rsi)
	if rsi > 70 {
		message += "- üî¥ RSI: Qu√° mua (Overbought)\n"
	} else if rsi < 30 {
		message += "- üü¢ RSI: Qu√° b√°n (Oversold)\n"
	} else {
		message += "- üü° RSI: Trung t√≠nh\n"
	}

	// Block khuy·∫øn ngh·ªã t·ªïng h·ª£p
	message += "\n**üí° KHUY·∫æN NGH·ªä T·ªîNG H·ª¢P:**\n"
	message += fmt.Sprintf("- %s\n", analysis.Recommendation)
	// Add RSI confirmation/divergence
	if analysis.Direction == "bullish" && rsi < 30 {
		message += "‚Ä¢ üéØ **RSI oversold + xu h∆∞·ªõng tƒÉng** = C∆° h·ªôi mua t·ªët!\n"
	} else if analysis.Direction == "bearish" && rsi > 70 {
		message += "‚Ä¢ ‚ö†Ô∏è **RSI overbought + xu h∆∞·ªõng gi·∫£m** = T√≠n hi·ªáu b√°n m·∫°nh!\n"
	} else if analysis.Direction == "bullish" && rsi > 70 {
		message += "‚Ä¢ üü° **Xu h∆∞·ªõng tƒÉng nh∆∞ng RSI cao** = C·∫©n th·∫≠n v·ªõi pullback\n"
	} else if analysis.Direction == "bearish" && rsi < 30 {
		message += "‚Ä¢ üü° **Xu h∆∞·ªõng gi·∫£m nh∆∞ng RSI th·∫•p** = C√≥ th·ªÉ bounce ng·∫Øn h·∫°n\n"
	}

	// Block qu·∫£n l√Ω r·ªßi ro
	message += "\n**‚ö†Ô∏è QU·∫¢N L√ù R·ª¶I RO:**\n"
	if analysis.Direction == "bullish" {
		message += fmt.Sprintf("‚Ä¢ Stop-loss: D∆∞·ªõi EMA21 (~$%s)\n", utils.FormatPriceN(ema21, 4))
		message += "‚Ä¢ Take-profit: Theo d√µi RSI v√† EMA crossover\n"
	} else if analysis.Direction == "bearish" {
		message += fmt.Sprintf("‚Ä¢ Stop-loss: Tr√™n EMA21 (~$%s)\n", utils.FormatPriceN(ema21, 4))
		message += "‚Ä¢ Target: Theo d√µi support v√† EMA50\n"
	} else {
		message += "‚Ä¢ Ch·ªù breakout kh·ªèi v√πng t√≠ch lu·ªπ\n"
		message += fmt.Sprintf("‚Ä¢ Watch level: EMA50 ($%s)\n", utils.FormatPriceN(ema50, 4))
	}

	// Block Volume
	message += "\n**üîä PH√ÇN T√çCH VOLUME:**\n"
	if !volumeAnalysis.CurrentVolume.IsZero() {
		message += fmt.Sprintf("- Volume hi·ªán t·∫°i: %s\n", utils.FormatVolume(volumeAnalysis.CurrentVolume))
		message += fmt.Sprintf("- SMA %d Volume: %s\n", models.VOLUME_SMA_PERIOD, utils.FormatVolume(volumeAnalysis.VolumeSMA21))
		message += fmt.Sprintf("- T·ª∑ l·ªá Volume/SMA: x%s\n", volumeAnalysis.VolumeRatio.StringFixed(2))
		message += fmt.Sprintf("- %s (%s)\n", volumeAnalysis.VolumeSignal, volumeAnalysis.VolumeStrength)
		message += fmt.Sprintf("- %s\n", volumeAnalysis.Confirmation)
	} else {
		message += "- Kh√¥ng ƒë·ªß d·ªØ li·ªáu volume ƒë·ªÉ ph√¢n t√≠ch\n"
	}

	loc := time.FixedZone("UTC+7", 7*60*60)
	// Th·ªùi gian c·∫≠p nh·∫≠t
	message += fmt.Sprintf("\n‚è∞ **C·∫≠p nh·∫≠t l√∫c:** %s", time.Now().In(loc).Format("15:04:05 02/01/2006"))

	return message, nil
}

// AnalyzeSignals ph√¢n t√≠ch t√≠n hi·ªáu t·ª´ c√°c ch·ªâ b√°o (gi·ªØ l·∫°i cho backward compatibility)
func (s *TechnicalAnalysisService) AnalyzeSignals(indicators models.TechnicalIndicators) []string {
	var signals []string

	// Ph√¢n t√≠ch RSI
	if indicators.RSI.GreaterThan(decimal.NewFromInt(70)) {
		signals = append(signals, "RSI: Qu√° mua (>70)")
	} else if indicators.RSI.LessThan(decimal.NewFromInt(30)) {
		signals = append(signals, "RSI: Qu√° b√°n (<30)")
	} else {
		signals = append(signals, "RSI: Trung t√≠nh (30-70)")
	}

	// Ph√¢n t√≠ch EMA
	if indicators.EMA20.GreaterThan(indicators.EMA50) && indicators.EMA50.GreaterThan(indicators.EMA200) {
		signals = append(signals, "EMA: Xu h∆∞·ªõng tƒÉng (Golden Cross)")
	} else if indicators.EMA20.LessThan(indicators.EMA50) && indicators.EMA50.LessThan(indicators.EMA200) {
		signals = append(signals, "EMA: Xu h∆∞·ªõng gi·∫£m (Death Cross)")
	} else {
		signals = append(signals, "EMA: Xu h∆∞·ªõng h·ªón h·ª£p")
	}

	// Ph√¢n t√≠ch MACD
	if indicators.MACD.GreaterThan(indicators.MACDSignal) {
		signals = append(signals, "MACD: T√≠n hi·ªáu tƒÉng")
	} else {
		signals = append(signals, "MACD: T√≠n hi·ªáu gi·∫£m")
	}

	return signals
}

// AssessRisk ƒë√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro (gi·ªØ l·∫°i cho backward compatibility)
func (s *TechnicalAnalysisService) AssessRisk(indicators models.TechnicalIndicators) string {
	riskScore := 0

	// RSI risk
	if indicators.RSI.GreaterThan(decimal.NewFromInt(80)) || indicators.RSI.LessThan(decimal.NewFromInt(20)) {
		riskScore += 3
	} else if indicators.RSI.GreaterThan(decimal.NewFromInt(70)) || indicators.RSI.LessThan(decimal.NewFromInt(30)) {
		riskScore += 2
	}

	// EMA risk
	if indicators.EMA20.LessThan(indicators.EMA50) && indicators.EMA50.LessThan(indicators.EMA200) {
		riskScore += 2
	}

	// MACD risk
	if indicators.MACD.LessThan(indicators.MACDSignal) {
		riskScore += 1
	}

	switch {
	case riskScore >= 5:
		return "CAO"
	case riskScore >= 3:
		return "TRUNG B√åNH"
	default:
		return "TH·∫§P"
	}
}
