package services

import (
	"chatbtc/config"
	"crypto/tls"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"

	"chatbtc/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/net/proxy"
)

// TelegramBotService qu·∫£n l√Ω bot Telegram
type TelegramBotService struct {
	bot        *tgbotapi.BotAPI
	cryptoAPI  *CryptoAPIService
	indicators *TechnicalAnalysisService
	chatID     int64
}

// NewTelegramBotService t·∫°o instance m·ªõi c·ªßa service
func NewTelegramBotService() (*TelegramBotService, error) {
	// C·∫•u h√¨nh proxy n·∫øu ƒë∆∞·ª£c b·∫≠t
	var client *http.Client
	if config.AppConfig.ProxyEnabled && config.AppConfig.ProxyURL != "" {
		switch config.AppConfig.ProxyType {
		case "socks5":
			// X·ª≠ l√Ω SOCKS5
			auth := &proxy.Auth{
				User:     config.AppConfig.ProxyUsername,
				Password: config.AppConfig.ProxyPassword,
			}
			dialer, err := proxy.SOCKS5("tcp", strings.TrimPrefix(config.AppConfig.ProxyURL, "socks5://"), auth, proxy.Direct)
			if err != nil {
				return nil, fmt.Errorf("l·ªói k·∫øt n·ªëi SOCKS5 proxy: %v", err)
			}
			client = &http.Client{
				Transport: &http.Transport{
					Dial: dialer.Dial,
				},
				Timeout: 30 * time.Second,
			}
		default:
			// X·ª≠ l√Ω HTTP/HTTPS
			proxyURL, err := url.Parse(config.AppConfig.ProxyURL)
			if err != nil {
				return nil, fmt.Errorf("l·ªói parse proxy URL: %v", err)
			}
			if config.AppConfig.ProxyUsername != "" {
				proxyURL.User = url.UserPassword(config.AppConfig.ProxyUsername, config.AppConfig.ProxyPassword)
			}
			client = &http.Client{
				Transport: &http.Transport{
					Proxy:           http.ProxyURL(proxyURL),
					TLSClientConfig: &tls.Config{InsecureSkipVerify: true}, // B·ªè qua SSL n·∫øu c·∫ßn
				},
				Timeout: 30 * time.Second,
			}
		}
	} else {
		client = &http.Client{
			Timeout: 30 * time.Second,
		}
	}

	// T·∫°o bot th√¥ng th∆∞·ªùng tr∆∞·ªõc
	bot, err := tgbotapi.NewBotAPI(config.AppConfig.TelegramBotToken)
	if err != nil {
		return nil, fmt.Errorf("l·ªói kh·ªüi t·∫°o bot: %v", err)
	}
	if config.AppConfig.ProxyEnabled {
		bot.Client = client
	}

	// Chat ID kh√¥ng b·∫Øt bu·ªôc, bot s·∫Ω nh·∫≠n tin nh·∫Øn t·ª´ t·∫•t c·∫£ users
	var chatID int64
	if config.AppConfig.TelegramChatID != "" {
		if parsedChatID, err := strconv.ParseInt(config.AppConfig.TelegramChatID, 10, 64); err == nil {
			chatID = parsedChatID
		}
	}

	return &TelegramBotService{
		bot:        bot,
		cryptoAPI:  NewCryptoAPIService(),
		indicators: NewTechnicalAnalysisService(),
		chatID:     chatID,
	}, nil
}

// StartBot kh·ªüi ƒë·ªông bot
func (s *TelegramBotService) StartBot() {
	log.Println("üöÄ Kh·ªüi ƒë·ªông Crypto Analysis Bot...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := s.bot.GetUpdatesChan(u)
	log.Println("‚úÖ Bot ƒë√£ s·∫µn s√†ng nh·∫≠n tin nh·∫Øn...")
	log.Printf("Bot ƒë√£ kh·ªüi ƒë·ªông: %s", s.bot.Self.UserName)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// Log tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c
		log.Printf("Nh·∫≠n tin nh·∫Øn t·ª´ %s , %s: %s", update.Message.From.UserName, update.Message.Chat.Title, update.Message.Text)

		// X·ª≠ l√Ω tin nh·∫Øn
		s.handleMessage(update.Message)
	}
}

// handleMessage x·ª≠ l√Ω tin nh·∫Øn t·ª´ user
func (s *TelegramBotService) handleMessage(message *tgbotapi.Message) {
	text := message.Text
	if !strings.HasPrefix(text, "/") {
		return
	}

	parts := strings.Fields(text)
	if len(parts) == 0 {
		return
	}

	command := strings.ToLower(parts[0])
	chatID := message.Chat.ID

	switch command {
	case "/start":
		s.sendWelcomeMessage(chatID)
	case "/help":
		s.sendHelpMessage(chatID)
	case "/price":
		if len(parts) < 2 {
			s.sendMessage(chatID, "‚ùå Vui l√≤ng cung c·∫•p symbol. V√≠ d·ª•: /price BTCUSDT")
			return
		}
		symbol := strings.ToUpper(parts[1])
		s.handlePriceCommand(chatID, symbol)
	case "/analyze":
		if len(parts) < 3 {
			s.sendMessage(chatID, "‚ùå Vui l√≤ng cung c·∫•p interval v√† symbol. V√≠ d·ª•: /analyze 1h BTCUSDT")
			return
		}
		interval := parts[1]
		symbol := strings.ToUpper(parts[2])
		s.handleAnalyzeCommand(chatID, interval, symbol)
	default:
		s.sendMessage(chatID, "‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. G√µ /help ƒë·ªÉ xem danh s√°ch l·ªánh.")
	}
}

// handlePriceCommand x·ª≠ l√Ω l·ªánh /price
func (s *TelegramBotService) handlePriceCommand(chatID int64, symbol string) {
	price, err := s.cryptoAPI.GetCurrentPrice(symbol)
	if err != nil {
		s.sendMessage(chatID, fmt.Sprintf("‚ùå L·ªói khi l·∫•y gi√° %s: %v", symbol, err))
		return
	}

	message := fmt.Sprintf("üí∞ **Gi√° %s**\n\n", strings.ToUpper(symbol))
	message += fmt.Sprintf("üíµ **Gi√° hi·ªán t·∫°i:** $%s\n", utils.FormatPrice(price.CurrentPrice))
	message += fmt.Sprintf("üìà **Thay ƒë·ªïi 24h:** %s (%s)\n",
		utils.FormatPercentage(price.PriceChangePercentage24h), utils.FormatPrice(price.PriceChange24h))
	message += fmt.Sprintf("üìä **Volume 24h:** $%s\n", utils.FormatVolume(price.Volume24h))
	loc := time.FixedZone("UTC+7", 7*60*60)
	message += fmt.Sprintf("‚è∞ **C·∫≠p nh·∫≠t:** %s", price.LastUpdated.In(loc).Format("15:04:05 02/01/2006"))

	s.sendMessage(chatID, message)
}

// handleAnalyzeCommand x·ª≠ l√Ω l·ªánh /analyze
func (s *TelegramBotService) handleAnalyzeCommand(chatID int64, interval string, symbol string) {
	// Validate interval
	validIntervals := map[string]bool{
		"1m": true, "5m": true, "15m": true, "30m": true,
		"1h": true, "4h": true, "1d": true, "1w": true,
	}

	if !validIntervals[interval] {
		s.sendMessage(chatID, "‚ùå Interval kh√¥ng h·ª£p l·ªá. C√°c interval ƒë∆∞·ª£c h·ªó tr·ª£: 1m, 5m, 15m, 30m, 1h, 4h, 1d, 1w")
		return
	}

	log.Printf("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch symbol: %s v·ªõi interval: %s", symbol, interval)

	// L·∫•y d·ªØ li·ªáu kline (100 n·∫øn g·∫ßn nh·∫•t)
	klines, err := s.cryptoAPI.GetKlineData(symbol, interval, 100)
	if err != nil {
		s.sendMessage(chatID, fmt.Sprintf("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu %s: %v", symbol, err))
		return
	}

	log.Printf("ƒê√£ l·∫•y ƒë∆∞·ª£c %d ƒëi·ªÉm d·ªØ li·ªáu l·ªãch s·ª≠ v·ªõi interval %s", len(klines), interval)

	// Ph√¢n t√≠ch v·ªõi service indicators m·ªõi
	analysis, err := s.indicators.AnalyzeCrypto(symbol, klines, interval)
	if err != nil {
		s.sendMessage(chatID, fmt.Sprintf("‚ùå L·ªói khi ph√¢n t√≠ch %s: %v", symbol, err))
		return
	}

	log.Printf("G·ª≠i tin nh·∫Øn ph√¢n t√≠ch cho chatID: %d", chatID)
	s.sendMessage(chatID, analysis)
}

// sendWelcomeMessage g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
func (s *TelegramBotService) sendWelcomeMessage(chatID int64) {
	message := "üéâ **Ch√†o m·ª´ng ƒë·∫øn v·ªõi Crypto Analysis Bot!**\n\n"
	message += "ü§ñ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
	message += "‚Ä¢ Xem gi√° crypto hi·ªán t·∫°i\n"
	message += "‚Ä¢ Ph√¢n t√≠ch k·ªπ thu·∫≠t v·ªõi RSI v√† EMA\n"
	message += "‚Ä¢ ƒê∆∞a ra khuy·∫øn ngh·ªã giao d·ªãch\n\n"
	message += "üìù **C√°c l·ªánh c√≥ s·∫µn:**\n"
	message += "/price <symbol> - Xem gi√° hi·ªán t·∫°i\n"
	message += "/analyze <interval> <symbol> - Ph√¢n t√≠ch k·ªπ thu·∫≠t\n"
	message += "/help - Xem h∆∞·ªõng d·∫´n chi ti·∫øt\n\n"
	message += "üí° **V√≠ d·ª•:**\n"
	message += "/price BTCUSDT\n"
	message += "/analyze 1h ETHUSDT"

	s.sendMessage(chatID, message)
}

// sendHelpMessage g·ª≠i tin nh·∫Øn h∆∞·ªõng d·∫´n
func (s *TelegramBotService) sendHelpMessage(chatID int64) {
	message := "üìö **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Crypto Analysis Bot**\n\n"
	message += "üîπ **L·ªánh c∆° b·∫£n:**\n"
	message += "‚Ä¢ `/start` - Kh·ªüi ƒë·ªông bot\n"
	message += "‚Ä¢ `/help` - Xem h∆∞·ªõng d·∫´n n√†y\n\n"
	message += "üîπ **L·ªánh ph√¢n t√≠ch:**\n"
	message += "‚Ä¢ `/price <symbol>` - Xem gi√° hi·ªán t·∫°i\n"
	message += "‚Ä¢ `/analyze <interval> <symbol>` - Ph√¢n t√≠ch k·ªπ thu·∫≠t\n\n"
	message += "üîπ **Interval ƒë∆∞·ª£c h·ªó tr·ª£:**\n"
	message += "‚Ä¢ `1m` - 1 ph√∫t\n"
	message += "‚Ä¢ `5m` - 5 ph√∫t\n"
	message += "‚Ä¢ `15m` - 15 ph√∫t\n"
	message += "‚Ä¢ `30m` - 30 ph√∫t\n"
	message += "‚Ä¢ `1h` - 1 gi·ªù\n"
	message += "‚Ä¢ `4h` - 4 gi·ªù\n"
	message += "‚Ä¢ `1d` - 1 ng√†y\n"
	message += "‚Ä¢ `1w` - 1 tu·∫ßn\n\n"
	message += "üîπ **Symbol ƒë∆∞·ª£c h·ªó tr·ª£:**\n"
	message += "‚Ä¢ BTCUSDT, ETHUSDT, ADAUSDT\n"
	message += "‚Ä¢ BNBUSDT, DOTUSDT, LINKUSDT\n"
	message += "‚Ä¢ V√† nhi·ªÅu c·∫∑p kh√°c...\n\n"
	message += "üîπ **Ch·ªâ b√°o k·ªπ thu·∫≠t:**\n"
	message += "‚Ä¢ RSI (14) - Ch·ªâ b√°o qu√° mua/qu√° b√°n\n"
	message += "‚Ä¢ EMA (20) - ƒê∆∞·ªùng trung b√¨nh ƒë·ªông\n\n"
	message += "üí° **V√≠ d·ª• s·ª≠ d·ª•ng:**\n"
	message += "‚Ä¢ `/analyze 1h BTCUSDT` - Ph√¢n t√≠ch BTC theo n·∫øn 1h\n"
	message += "‚Ä¢ `/analyze 15m ETHUSDT` - Ph√¢n t√≠ch ETH theo n·∫øn 15m\n"
	message += "‚Ä¢ `/analyze 1d BNBUSDT` - Ph√¢n t√≠ch BNB theo n·∫øn 1 ng√†y\n\n"
	message += "‚ö†Ô∏è **L∆∞u √Ω:**\n"
	message += "‚Ä¢ Ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o\n"
	message += "‚Ä¢ Kh√¥ng ph·∫£i l·ªùi khuy√™n ƒë·∫ßu t∆∞\n"
	message += "‚Ä¢ Lu√¥n DYOR (Do Your Own Research)"

	s.sendMessage(chatID, message)
}

// sendMessage g·ª≠i tin nh·∫Øn ƒë·∫øn chat
func (s *TelegramBotService) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	_, err := s.bot.Send(msg)
	if err != nil {
		log.Printf("L·ªói khi g·ª≠i tin nh·∫Øn: %v", err)
	}
}

// Stop d·ª´ng bot
func (s *TelegramBotService) Stop() {
	log.Println("üõë ƒêang d·ª´ng bot...")
}
