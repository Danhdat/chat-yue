package main

import (
	"chatbtc/config"
	"chatbtc/models"
	"chatbtc/services"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
)

func main() {
	http.HandleFunc("/health", healthCheck)
	go func() {
		log.Println("Healthcheck server running at :8080/health")
		log.Fatal(http.ListenAndServe(":8080", nil))
	}()
	// Load c·∫•u h√¨nh
	config.LoadConfig()

	// Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc
	if config.AppConfig.TelegramBotToken == "" {
		log.Fatal("‚ùå TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh")
	}

	log.Println("üöÄ Kh·ªüi ƒë·ªông Crypto Analysis Bot...")

	// Kh·ªüi t·∫°o database
	if err := models.InitDatabase(); err != nil {
		log.Fatalf("‚ùå L·ªói k·∫øt n·ªëi database: %v", err)
	}
	defer models.CloseDatabase()

	// Auto migrate database
	if err := models.AutoMigrate(); err != nil {
		log.Fatalf("‚ùå L·ªói migrate database: %v", err)
	}

	// Kh·ªüi t·∫°o Telegram bot service
	botService, err := services.NewTelegramBotService()
	if err != nil {
		log.Fatalf("‚ùå L·ªói kh·ªüi t·∫°o bot: %v", err)
	}

	// T·∫°o channel ƒë·ªÉ nh·∫≠n t√≠n hi·ªáu d·ª´ng
	stopChan := make(chan os.Signal, 1)
	signal.Notify(stopChan, syscall.SIGINT, syscall.SIGTERM)

	// Kh·ªüi ƒë·ªông bot trong goroutine
	go func() {
		log.Println("‚úÖ Bot ƒë√£ s·∫µn s√†ng nh·∫≠n tin nh·∫Øn...")
		botService.StartBot()
	}()

	// Ch·ªù t√≠n hi·ªáu d·ª´ng
	<-stopChan
	log.Println("üõë ƒêang d·ª´ng bot...")
}

func healthCheck(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("OK"))
}
